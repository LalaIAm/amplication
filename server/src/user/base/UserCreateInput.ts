/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { IsString, IsOptional, ValidateNested } from "class-validator";
import { EventCreateNestedManyWithoutUsersInput } from "./EventCreateNestedManyWithoutUsersInput";
import { Type } from "class-transformer";
import { HouseholdWhereUniqueInput } from "../../household/base/HouseholdWhereUniqueInput";
import { ItemCreateNestedManyWithoutUsersInput } from "./ItemCreateNestedManyWithoutUsersInput";
import { ListCreateNestedManyWithoutUsersInput } from "./ListCreateNestedManyWithoutUsersInput";
import { NoteCreateNestedManyWithoutUsersInput } from "./NoteCreateNestedManyWithoutUsersInput";
import { PostCreateNestedManyWithoutUsersInput } from "./PostCreateNestedManyWithoutUsersInput";
@InputType()
class UserCreateInput {
  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  avatar?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  bio?: string | null;

  @ApiProperty({
    required: false,
    type: () => EventCreateNestedManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => EventCreateNestedManyWithoutUsersInput)
  @IsOptional()
  @Field(() => EventCreateNestedManyWithoutUsersInput, {
    nullable: true,
  })
  event?: EventCreateNestedManyWithoutUsersInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  firstName?: string | null;

  @ApiProperty({
    required: false,
    type: () => HouseholdWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => HouseholdWhereUniqueInput)
  @IsOptional()
  @Field(() => HouseholdWhereUniqueInput, {
    nullable: true,
  })
  household?: HouseholdWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: () => ItemCreateNestedManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => ItemCreateNestedManyWithoutUsersInput)
  @IsOptional()
  @Field(() => ItemCreateNestedManyWithoutUsersInput, {
    nullable: true,
  })
  items?: ItemCreateNestedManyWithoutUsersInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  lastName?: string | null;

  @ApiProperty({
    required: false,
    type: () => ListCreateNestedManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => ListCreateNestedManyWithoutUsersInput)
  @IsOptional()
  @Field(() => ListCreateNestedManyWithoutUsersInput, {
    nullable: true,
  })
  lists?: ListCreateNestedManyWithoutUsersInput;

  @ApiProperty({
    required: false,
    type: () => NoteCreateNestedManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => NoteCreateNestedManyWithoutUsersInput)
  @IsOptional()
  @Field(() => NoteCreateNestedManyWithoutUsersInput, {
    nullable: true,
  })
  notes?: NoteCreateNestedManyWithoutUsersInput;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  password!: string;

  @ApiProperty({
    required: false,
    type: () => PostCreateNestedManyWithoutUsersInput,
  })
  @ValidateNested()
  @Type(() => PostCreateNestedManyWithoutUsersInput)
  @IsOptional()
  @Field(() => PostCreateNestedManyWithoutUsersInput, {
    nullable: true,
  })
  posts?: PostCreateNestedManyWithoutUsersInput;

  @ApiProperty({
    required: true,
    type: [String],
  })
  @IsString({
    each: true,
  })
  @Field(() => [String])
  roles!: Array<string>;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  username!: string;
}
export { UserCreateInput };
